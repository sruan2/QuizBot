cex = 1.0,                # size of points
xlim=c(20, 80),          # limits of x-axis
ylim=c(20, 80),          # limits of y-axis
xlab="Flashcard total usage time (in minutes)",            # label for x-axis
ylab="QuizBot total usage time (in minutes)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(0, 80),          # limits of x-axis
ylim=c(0, 80),          # limits of y-axis
xlab="Flashcard total usage time (in minutes)",            # label for x-axis
ylab="QuizBot total usage time (in minutes)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
# Shapiro-Wilk normality test for the differences
shapiro.test(diff) # p-value > 0.05 => can assume the normality
# Shapiro-Wilk normality test for the differences
shapiro.test(diff) # p-value > 0.05 => can assume the normality
# Compute t-test
res <- t.test(total_time ~ which_app, data = df, paired = TRUE)
res
# Effect size
# http://rcompanion.org/handbook/I_04.html
cohensD(total_time ~ which_app, data  = df, method = "paired")
# Power analysis
# https://www.statmethods.net/stats/power.html
pwr.t.test(n=11, d = 1.10, sig.level = 0.05, type="paired")
df <- read.csv(file="/users/sherryruan/github/QuizBot/r_analysis/within_subject.csv",head=TRUE,sep=",")
print(df)
# remove % symbols since r cannot recognize them
#df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))/100
df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))
df[,"percent_mc_improve"] <- as.numeric(gsub("%", "",df[,"percent_mc_improve"]))
print(df)
# remove rows containing NA values
df <- na.omit(df)
print(df)
summary(df)
boxplot(percent_recall ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percentage of questions correctly recalled', ylab='%')
df <- read.csv(file="/users/sherryruan/github/QuizBot/r_analysis/within_subject.csv",head=TRUE,sep=",")
print(df)
# remove % symbols since r cannot recognize them
#df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))/100
df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))
df[,"percent_mc_improve"] <- as.numeric(gsub("%", "",df[,"percent_mc_improve"]))
print(df)
# remove rows containing NA values
df <- na.omit(df)
print(df)
summary(df)
boxplot(percent_recall ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percentage of questions correctly recalled', ylab='%')
# Check normality
# compute the difference
diff <- with(df, percent_recall[which_app == "Flashcard"] - percent_recall[which_app == "QuizBot"])
hist(diff, main = "Histogram of percentage of correctly recalled questions difference")
print(diff)
# Shapiro-Wilk normality test for the differences
shapiro.test(diff) # p-value > 0.05 => can assume the normality
# bar plot of diffs
Flashcard = df$percent_recall[df$which_app=="Flashcard"]
QuizBot   = df$percent_recall[df$which_app=="QuizBot"]
Difference = QuizBot - Flashcard
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8", "User 9", "User 10", "User 11")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="minutes",
names.arg= Names,
main="Bar plot of time differences (QuizBot - Flashcard)")     # y-axis label
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8", "User 9", "User 10")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="minutes",
names.arg= Names,
main="Bar plot of time differences (QuizBot - Flashcard)")     # y-axis label
# Scatter plot with one-to-one line
par(pty = "s")
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(0, 80),          # limits of x-axis
ylim=c(0, 80),          # limits of y-axis
xlab="Flashcard total usage time (in minutes)",            # label for x-axis
ylab="QuizBot total usage time (in minutes)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(0, 80),          # limits of x-axis
ylim=c(0, 80),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
boxplot(percent_recall ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percentage of questions correctly recalled', ylab='%')
# bar plot of diffs
Flashcard = df$percent_recall[df$which_app=="Flashcard"]
QuizBot   = df$percent_recall[df$which_app=="QuizBot"]
Difference = QuizBot - Flashcard
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8", "User 9", "User 10")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of recall rate differences (QuizBot - Flashcard)")     # y-axis label
df <- read.csv(file="/users/sherryruan/github/QuizBot/r_analysis/within_subject.csv",head=TRUE,sep=",")
print(df)
# remove % symbols since r cannot recognize them
#df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))/100
df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))
df[,"percent_mc_improve"] <- as.numeric(gsub("%", "",df[,"percent_mc_improve"]))
print(df)
# remove rows containing NA values
df <- na.omit(df)
# bar plot of diffs
Flashcard = df$percent_recall[df$which_app=="Flashcard"]
QuizBot   = df$percent_recall[df$which_app=="QuizBot"]
Difference = QuizBot - Flashcard
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8", "User 9", "User 10")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of recall rate differences (QuizBot - Flashcard)")     # y-axis label
# Scatter plot with one-to-one line
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(0, 80),          # limits of x-axis
ylim=c(0, 80),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of recall rate differences (QuizBot - Flashcard)")     # y-axis label
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8", "User 9")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of recall rate differences (QuizBot - Flashcard)")     # y-axis label
# Scatter plot with one-to-one line
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(0, 80),          # limits of x-axis
ylim=c(0, 80),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
boxplot(percent_recall ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percentage of questions correctly recalled', ylab='%')
# Check normality
# compute the difference
diff <- with(df, percent_recall[which_app == "Flashcard"] - percent_recall[which_app == "QuizBot"])
hist(diff, main = "Histogram of percentage of correctly recalled questions difference")
print(diff)
# Shapiro-Wilk normality test for the differences
shapiro.test(diff) # p-value > 0.05 => can assume the normality
# Compute t-test
res <- t.test(percent_recall ~ which_app, data = df, paired = TRUE)
res
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(0, 80),          # limits of x-axis
ylim=c(0, 80),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
summary(df)
summary(df)
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of recall rate differences (QuizBot - Flashcard)")     # y-axis label
# Check normality
# compute the difference
diff <- with(df, percent_recall[which_app == "Flashcard"] - percent_recall[which_app == "QuizBot"])
hist(diff, main = "Histogram of percentage of correctly recalled questions difference")
print(diff)
hist(diff, main = "Histogram of percentage of correctly recalled questions difference")
print(diff)
# Shapiro-Wilk normality test for the differences
shapiro.test(diff) # p-value > 0.05 => can assume the normality
# Compute t-test
res <- t.test(percent_recall ~ which_app, data = df, paired = TRUE)
res
boxplot(percent_recall ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percentage of questions correctly recalled', ylab='%')
# Compute t-test
res <- t.test(percent_recall ~ which_app, data = df, paired = TRUE)
res
df <- read.csv(file="/users/sherryruan/github/QuizBot/r_analysis/within_subject.csv",head=TRUE,sep=",")
print(df)
# remove % symbols since r cannot recognize them
#df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))/100
df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))
df[,"percent_mc_improve"] <- as.numeric(gsub("%", "",df[,"percent_mc_improve"]))
print(df)
# remove rows containing NA values
df <- na.omit(df)
print(df)
summary(df)
summary(df)
boxplot(percent_mc_improve ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percentage improvement for multiple choice questions', ylab='%')
boxplot(percent_mc_improve ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percent improvement for multiple choice questions', ylab='%')
# bar plot of diffs
Flashcard = df$percent_mc_improve[df$which_app=="Flashcard"]
QuizBot   = df$percent_mc_improve[df$which_app=="QuizBot"]
Difference = QuizBot - Flashcard
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of MC correct rate differences (QuizBot - Flashcard)")     # y-axis label
summary(df)
df <- read.csv(file="/users/sherryruan/github/QuizBot/r_analysis/within_subject.csv",head=TRUE,sep=",")
print(df)
# remove % symbols since r cannot recognize them
#df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))/100
df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))
df[,"percent_mc_improve"] <- as.numeric(gsub("%", "",df[,"percent_mc_improve"]))
print(df)
# remove rows containing NA values
df <- na.omit(df)
print(df)
summary(df)
boxplot(percent_mc_improve ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percent improvement for multiple choice questions', ylab='%')
summary(df)
df <- read.csv(file="/users/sherryruan/github/QuizBot/r_analysis/within_subject.csv",head=TRUE,sep=",")
print(df)
# remove % symbols since r cannot recognize them
#df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))/100
df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))
print(df)
# remove rows containing NA values
df <- na.omit(df)
print(df)
boxplot(percent_mc_improve ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percent improvement for multiple choice questions', ylab='%')
boxplot(percent_mc_improve ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percent improvement for multiple choice questions', ylab='%')
df <- read.csv(file="/users/sherryruan/github/QuizBot/r_analysis/within_subject.csv",head=TRUE,sep=",")
print(df)
# remove % symbols since r cannot recognize them
#df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))/100
df[,"percent_recall"] <- as.numeric(gsub("%", "",df[,"percent_recall"]))
df[,"percent_mc_improve"] <- as.numeric(gsub("%", "",df[,"percent_mc_improve"]))
print(df)
# remove rows containing NA values
df <- na.omit(df)
print(df)
summary(df)
boxplot(percent_mc_improve ~ which_app, data = df, col = c("lightblue", "lightyellow"), main='percent improvement for multiple choice questions', ylab='%')
# bar plot of diffs
Flashcard = df$percent_mc_improve[df$which_app=="Flashcard"]
QuizBot   = df$percent_mc_improve[df$which_app=="QuizBot"]
Difference = QuizBot - Flashcard
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of MC correct rate differences (QuizBot - Flashcard)")     # y-axis label
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(0, 80),          # limits of x-axis
ylim=c(0, 80),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(-50, 200),          # limits of x-axis
ylim=c(-50, 200),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
print(df)
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(-50, 200),          # limits of x-axis
ylim=c(-50, 200),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
# bar plot of diffs
Flashcard = df$percent_mc_improve[df$which_app=="Flashcard"]
QuizBot   = df$percent_mc_improve[df$which_app=="QuizBot"]
Difference = QuizBot - Flashcard
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of MC correct rate differences (QuizBot - Flashcard)")     # y-axis label
# bar plot of diffs
Flashcard = df$percent_mc_improve[df$which_app=="Flashcard"]
QuizBot   = df$percent_mc_improve[df$which_app=="QuizBot"]
Difference = QuizBot - Flashcard
Names = c("User 1", "User 2", "User 3", "User 4", "User 5", "User 6", "User 7", "User 8")
barplot(Difference,                             # variable to plot
col="dark gray",                        # color of bars
xlab="Users",                     # x-axis label
ylab="%",
names.arg= Names,
main="Bar plot of MC correct rate differences (QuizBot - Flashcard)")     # y-axis label
# Scatter plot with one-to-one line
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(-50, 200),          # limits of x-axis
ylim=c(-50, 200),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
# Scatter plot with one-to-one line
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(-40, 180),          # limits of x-axis
ylim=c(-40, 180),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(-40, 190),          # limits of x-axis
ylim=c(-40, 190),          # limits of y-axis
xlab="Flashcard recall rate (in %)",            # label for x-axis
ylab="QuizBot recall rate (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
par(pty = "s")
plot(Flashcard, jitter(QuizBot),    # jitter offsets points so you can see them all
pch = 16,                 # shape of points
cex = 1.0,                # size of points
xlim=c(-40, 190),          # limits of x-axis
ylim=c(-40, 190),          # limits of y-axis
xlab="Flashcard MC correct rate improv (in %)",            # label for x-axis
ylab="QuizBot MC correct rate improv (in %)")             # label for y-axis
text(Flashcard, QuizBot, labels=Names,  # Label location and text
pos=3, cex=1.0, col="grey")               # Label text position and size
abline(0, 1, col="blue", lwd=2)     # line with intercept of 0 and slope of 1
# Check normality
# compute the difference
diff <- with(df, percent_mc_improve[which_app == "Flashcard"] - percent_mc_improve[which_app == "QuizBot"])
hist(diff, main = "Histogram of multiple choice percent improvement difference")
print(diff)
# Shapiro-Wilk normality test for the differences
shapiro.test(diff) # p-value > 0.05 => can assume the normality
# Compute t-test
res <- t.test(percent_mc_improve ~ which_app, data = df, paired = TRUE)
# Shapiro-Wilk normality test for the differences
shapiro.test(diff) # p-value > 0.05 => can assume the normality
# Compute t-test
res <- t.test(percent_mc_improve ~ which_app, data = df, paired = TRUE)
res
flashcard_time = c(35.85, 13.15, 30.64, 16.1, 23)
quizbot_time = c(24.26, 18.58, 63.77, 57.35, 36.09)
time_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(5,5)),
total_time = c(flashcard_time,  quizbot_time))
print(time_data)
boxplot(total_time ~ group, data = time_data, col = c("lightblue", "lightyellow"), main='Total usage time over 7 days', ylab='minutes')
boxplot(total_time ~ group, data = time_data, col = c("lightblue", "lightyellow"), main='Total usage time over 7 days (n=10) (batch 2)', ylab='minutes')
t.test(flashcard_time, quizbot_time, paired=FALSE, var.equal = TRUE, alternative='two.sided')
# Assumtion 2: Are the data from each of the 2 groups follow a normal distribution?
hist(flashcard_time, main = "Histogram of flashcard app usage time")
hist(quizbot_time, main = "Histogram of quizbot app usage time")
# Shapiro-Wilk normality test for normality assumption
with(score_data, shapiro.test(score[group == "flashcard"]))# p = 0.77
# Shapiro-Wilk normality test for normality assumption
with(score_data, shapiro.test(score[group == "flashcard"]))# p = 0.77
# Shapiro-Wilk normality test for normality assumption
with(score_data, shapiro.test(score[group == "flashcard"]))# p = 0.99
with(score_data, shapiro.test(score[group == "quizbot"]))# p = 0.45
# Shapiro-Wilk normality test for normality assumption
with(time_data, shapiro.test(total_time[group == "flashcard"]))# p = 0.99
with(time_data, shapiro.test(total_time[group == "quizbot"]))# p = 0.02
with(time_data, shapiro.test(total_time[group == "quizbot"]))# p = 0.47
# Assumption 3. Do the two populations have the same variances?
res.ftest <- var.test(score ~ group, data = score_data)
# Assumption 3. Do the two populations have the same variances?
res.ftest <- var.test(total_time ~ group, data = time_data)
print(res.ftest) # p = 0.54, there is no significant difference between the variances of the two sets of data
t.test(flashcard_time, quizbot_time, paired=FALSE, var.equal = TRUE, alternative='two.sided')
t.test(flashcard_time, quizbot_time, paired=FALSE, var.equal = TRUE, alternative='two.sided')
# Pilot Study: 40 + 10 score
flashcard_score = c(22.2, -42.3, 0.0, 40.9, 29.2)
quizbot_score = c(-19.0, 20.0, 29.6, 0.0, 32.1)
score_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(5,5)),
score = c(flashcard_score,  quizbot_score))
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Score improvement time over 7 days', ylab='minutes')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Score improvement time over 7 days (batch 2) (n=10)', ylab='minutes')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Score improvement time over 7 days (batch 2) (n=10)', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Score improvement over 7 days (batch 2) (n=10)', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='MC score improvement over 7 days (batch 2) (n=10)', ylab='%')
flashcard_mc_over_seen = c(68.8, 18.8, 48.6, 42.9, 52.4)
quizbot_mc_over_seen = c(66.7, 80.0, 85.0, 40.0, 85.0)
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of all the questions users practiced, how much of them are correctly answered in the post-test MC quiz (batch 2) (n=10)', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of all the questions users practiced, % them are correctly answered in the post-test quiz (batch 2) (n=10)', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of questions seen, % them are correctly answered in the post-test quiz (batch 2) (n=10)', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of questions seen, % correctly answered in post quiz (batch 2) (n=10)', ylab='%')
flashcard_mc_over_seen = c(68.8, 18.8, 48.6, 42.9, 52.4)
quizbot_mc_over_seen = c(66.7, 80.0, 85.0, 40.0, 85.0)
score_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(5,5)),
score = c(flashcard_score,  quizbot_score))
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of questions seen, % correctly answered in post quiz (batch 2) (n=10)', ylab='%')
flashcard_mc_over_seen = c(68.8, 18.8, 48.6, 42.9, 52.4)
quizbot_mc_over_seen = c(66.7, 80.0, 85.0, 40.0, 85.0)
score_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(5,5)),
score = c(flashcard_score,  quizbot_score))
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of questions seen, % correctly answered in post MC quiz (batch 2) (n=10)', ylab='%')
score_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(5,5)),
score = c(flashcard_mc_over_seen,  quizbot_mc_over_seen))
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of questions seen, % correctly answered in post MC quiz (batch 2) (n=10)', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of questions seen, % correctly answered in post MC quiz (batch 2, n=10)', ylab='%')
flashcard_time = c(33.86, 41.84, 19.31, 35.31, 30.11, 23.66)
quizbot_time = c(59.8, 78.62, 49.23, 45.81, 41.11, 31.89, 25.77)
time_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(6,6)),
total_time = c(flashcard_time,  quizbot_time))
flashcard_time = c(33.86, 41.84, 19.31, 35.31, 30.11, 23.66)
quizbot_time = c(59.8, 78.62, 49.23, 45.81, 41.11, 31.89)
time_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(6,6)),
total_time = c(flashcard_time,  quizbot_time))
print(time_data)
boxplot(total_time ~ group, data = time_data, col = c("lightblue", "lightyellow"), main='Total usage time over 7 days (batch 1, n=12)', ylab='minutes')
boxplot(total_time ~ group, data = time_data, col = c("lightblue", "lightyellow"), main='Total usage time over 7 days (batch 1, n=6+6)', ylab='minutes')
flashcard_score = c(55.6, 64.3, 27.0, 44.4, 17.6, 44.4)
quizbot_score = c(17.9, 0, 9.7, 7.1, 75.0, 35.5)
score_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(6,6)),
score = c(flashcard_score,  quizbot_score))
flashcard_score = c(55.6, 64.3, 27.0, 44.4, 17.6, 44.4)
quizbot_score = c(17.9, 0, 9.7, 7.1, 75.0, 35.5)
score_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(6,6)),
score = c(flashcard_score,  quizbot_score))
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='MC correct rate % improve over 7 days', ylab='%')
mean(quizbot_score)
mean(flashcard_score)
# correct / seen
flashcard_score = c(56.0, 85.7, 95.0, 96.1, 81.5, 33.3)
quizbot_score = c(80.8, 88.5, 89.5, 62.5, 92.9, 93.8)
score_data <- data.frame(group = rep(c("flashcard", "quizbot"), c(6,6)),
score = c(flashcard_score,  quizbot_score))
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='MC correct rate % improve over 7 days', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='MC correct rate % improve over 7 days', ylab='%')
boxplot(score ~ group, data = score_data, col = c("lightblue", "lightyellow"), main='Of questions seen, % correctly answered in post MC quiz (batch 1, n=12)', ylab='%')
# Stacked Bar Plot with Colors and Legend
flashcard = c(22.2, -42.3, 0.0, 40.9, 29.2)
quizbot = c(-19.0, 20.0, 29.6, 0.0, 32.1)
data <- data.frame(group = rep(c("flashcard", "quizbot"), c(5,5)),
score = c(flashcard,  quizbot))
counts <- table(data$flashcard, mtcars$quizbot)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
counts <- table(data$flashcard, data$quizbot)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
print(counts)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
library(plotly)

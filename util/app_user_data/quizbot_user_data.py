'''
    quizbot_time.py
    Author: Liwei Jiang
    Date: 02/08/2018
    Usage: Calculate the usage time of the QuizBot app for a user.
'''
import csv
import sys
import os
import numpy
from datetime import datetime

dirname = os.path.dirname(__file__)
result_filename = "quizbot_data_analysis.txt"
practice_question_file = "practice_question.csv"
correctness_rate_file = "correctness_rate.csv"

# Past Pilot Users: "Alex_Nguyen", "Maika_Isogawa", "Michael_Cooper", "Jordan_Cho", "Laura_Davey"

# users = ["Veronica_Cruz", "Jackie_Fortin", "Eleni_Aneziris", "Zilin_Ma", "Jongho_Kim", \
#        "Nina_Tai", "Yi_Feng", "Pingyu_Wang", "Dae hyun_Kim", "Lantao_Mei", \
#          "Michael_Silvernagel", "Bianca_Yu" ]

# within-subject users
users = ["Noah Yinuo_Yao", "Dee Dee_Thao", "Zhenqi_Hu", "Jingyi_Li", "Joy_Yuzuriha", "Tyler_Yep", \
         "Andrew_Ying", "Henry_Qin", "Nina_Horowitz", "Daniel_Do", "Fangmingyu_Yang", "Francis_Yan", \
         "Olivia_Yang", "Ted_Shaowang", "Helen_Wang", "De-an_Huang", "Kylie_Jue", \
         "Giovanni_Campagna", "Jean_Coquet", "Zhouheng_Zhuang"]

         # , "Yue_Hui", "Clayton_Ellington", \
         # "Nathaniel_Ramos", "Paul_Walter", "Flora_Wang", "Christine_Liu", "Selen_Bozkurt", "Maisam_Pyarali", \
         # "Nathan_Dalal", "Sorathan_Chaturapruek", "Daniel_Choe", "Owen_Wang", "Richard_Xu", "Yang_Wang",
         # "Hongsheng_Fang"]
         
# users.append("Julia_Thompson")

# a dictionary of the number of times user studied each question
practice_question_count = {'Jean_Coquet': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 0, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Henry_Qin': {128: 0, 130: 0, 131: 0, 133: 0, 6: 6, 135: 0, 9: 1, 10: 0, 11: 11, 141: 0, 142: 0, 15: 3, 144: 0, 145: 0, 18: 2, 3: 2, 148: 1, 24: 1, 29: 11, 37: 1, 40: 1, 41: 1, 44: 1, 46: 10, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 3, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Kylie_Jue': {128: 0, 130: 0, 131: 0, 133: 2, 6: 2, 135: 0, 9: 1, 10: 0, 11: 1, 141: 0, 142: 0, 15: 2, 144: 1, 145: 0, 18: 0, 3: 1, 148: 0, 24: 1, 29: 0, 37: 0, 40: 2, 41: 3, 44: 1, 46: 2, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 1, 17: 0, 104: 1, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Andrew_Ying': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 1, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Noah Yinuo_Yao': {128: 5, 130: 3, 131: 10, 133: 2, 6: 46, 135: 4, 9: 45, 10: 43, 11: 51, 141: 4, 142: 1, 15: 36, 144: 4, 145: 8, 18: 38, 3: 47, 148: 5, 24: 49, 29: 55, 37: 43, 40: 53, 41: 56, 44: 31, 46: 33, 49: 32, 51: 2, 52: 6, 55: 4, 56: 7, 58: 3, 59: 4, 73: 7, 75: 4, 76: 5, 77: 6, 83: 6, 88: 3, 89: 4, 90: 2, 92: 4, 99: 7, 102: 11, 17: 43, 104: 4, 106: 8, 111: 6, 113: 6, 114: 3}, 
                            'Nina_Horowitz': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 1, 11: 5, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 2, 148: 0, 24: 3, 29: 6, 37: 1, 40: 2, 41: 2, 44: 3, 46: 6, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Jingyi_Li': {128: 7, 130: 13, 131: 10, 133: 5, 6: 6, 135: 11, 9: 10, 10: 9, 11: 8, 141: 5, 142: 14, 15: 11, 144: 11, 145: 5, 18: 5, 3: 10, 148: 7, 24: 6, 29: 10, 37: 11, 40: 13, 41: 9, 44: 8, 46: 7, 49: 3, 51: 1, 52: 4, 55: 7, 56: 3, 58: 7, 59: 4, 73: 5, 75: 1, 76: 1, 77: 4, 83: 9, 88: 3, 89: 1, 90: 5, 92: 6, 99: 6, 102: 15, 17: 9, 104: 8, 106: 6, 111: 8, 113: 9, 114: 9}, 
                            'Joy_Yuzuriha': {128: 7, 130: 6, 131: 9, 133: 10, 6: 2, 135: 4, 9: 1, 10: 0, 11: 1, 141: 9, 142: 9, 15: 2, 144: 8, 145: 6, 18: 5, 3: 0, 148: 5, 24: 2, 29: 1, 37: 0, 40: 2, 41: 6, 44: 0, 46: 2, 49: 1, 51: 3, 52: 1, 55: 2, 56: 1, 58: 1, 59: 1, 73: 1, 75: 1, 76: 1, 77: 1, 83: 4, 88: 3, 89: 5, 90: 6, 92: 1, 99: 2, 102: 9, 17: 1, 104: 6, 106: 15, 111: 10, 113: 9, 114: 11}, 
                            'Olivia_Yang': {128: 0, 130: 1, 131: 0, 133: 0, 6: 4, 135: 0, 9: 2, 10: 2, 11: 4, 141: 0, 142: 1, 15: 1, 144: 0, 145: 1, 18: 1, 3: 1, 148: 1, 24: 4, 29: 2, 37: 3, 40: 2, 41: 3, 44: 3, 46: 1, 49: 1, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 1, 104: 1, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Ted_Shaowang': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 0, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 1, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 1, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Zhouheng_Zhuang': {128: 0, 130: 0, 131: 0, 133: 1, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 1, 148: 0, 24: 0, 29: 1, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 1, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 1, 92: 1, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 1, 114: 0}, 
                            'De-an_Huang': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 0, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Tyler_Yep': {128: 2, 130: 3, 131: 1, 133: 1, 6: 5, 135: 2, 9: 2, 10: 5, 11: 8, 141: 0, 142: 3, 15: 2, 144: 1, 145: 1, 18: 2, 3: 2, 148: 2, 24: 5, 29: 7, 37: 6, 40: 4, 41: 5, 44: 7, 46: 5, 49: 2, 51: 3, 52: 1, 55: 1, 56: 2, 58: 1, 59: 3, 73: 2, 75: 1, 76: 1, 77: 2, 83: 1, 88: 2, 89: 5, 90: 1, 92: 2, 99: 2, 102: 1, 17: 4, 104: 0, 106: 1, 111: 1, 113: 2, 114: 2}, 
                            'Helen_Wang': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 0, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Dee Dee_Thao': {128: 0, 130: 0, 131: 0, 133: 0, 6: 4, 135: 0, 9: 5, 10: 2, 11: 1, 141: 0, 142: 0, 15: 1, 144: 0, 145: 0, 18: 1, 3: 2, 148: 0, 24: 3, 29: 2, 37: 0, 40: 4, 41: 1, 44: 1, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 2, 104: 0, 106: 0, 111: 0, 113: 1, 114: 0}, 
                            'Giovanni_Campagna': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 1, 3: 0, 148: 0, 24: 2, 29: 0, 37: 1, 40: 3, 41: 1, 44: 2, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 1, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Fangmingyu_Yang': {128: 0, 130: 0, 131: 0, 133: 0, 6: 62, 135: 0, 9: 76, 10: 68, 11: 80, 141: 0, 142: 0, 15: 64, 144: 0, 145: 0, 18: 67, 3: 70, 148: 0, 24: 71, 29: 91, 37: 71, 40: 72, 41: 70, 44: 62, 46: 76, 49: 55, 51: 0, 52: 1, 55: 1, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 2, 90: 0, 92: 1, 99: 1, 102: 0, 17: 72, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0}, 
                            'Zhenqi_Hu': {128: 4, 130: 6, 131: 6, 133: 5, 6: 6, 135: 8, 9: 9, 10: 12, 11: 15, 141: 4, 142: 9, 15: 8, 144: 5, 145: 3, 18: 8, 3: 13, 148: 9, 24: 12, 29: 8, 37: 6, 40: 6, 41: 6, 44: 7, 46: 12, 49: 9, 51: 1, 52: 4, 55: 4, 56: 6, 58: 4, 59: 6, 73: 1, 75: 3, 76: 7, 77: 3, 83: 1, 88: 5, 89: 5, 90: 6, 92: 3, 99: 2, 102: 3, 17: 8, 104: 5, 106: 6, 111: 9, 113: 6, 114: 5}, 
                            'Daniel_Do': {128: 0, 130: 0, 131: 0, 133: 2, 6: 1, 135: 0, 9: 0, 10: 7, 11: 0, 141: 0, 142: 0, 15: 1, 144: 1, 145: 0, 18: 1, 3: 7, 148: 0, 24: 2, 29: 5, 37: 1, 40: 6, 41: 2, 44: 6, 46: 1, 49: 3, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 1, 99: 1, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 1}, 
                            'Francis_Yan': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 1, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 1, 3: 0, 148: 1, 24: 0, 29: 0, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 1, 52: 0, 55: 0, 56: 0, 58: 0, 59: 1, 73: 0, 75: 0, 76: 2, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 1, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0},
                            'Helen_Wang': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 0, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0},
                            'De-an_Huang': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 0, 37: 0, 40: 0, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0},
                            'Kylie_Jue': {128: 0, 130: 0, 131: 0, 133: 2, 6: 2, 135: 0, 9: 1, 10: 0, 11: 1, 141: 0, 142: 0, 15: 2, 144: 1, 145: 0, 18: 0, 3: 1, 148: 0, 24: 1, 29: 0, 37: 0, 40: 2, 41: 3, 44: 1, 46: 2, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 1, 17: 0, 104: 1, 106: 0, 111: 0, 113: 0, 114: 0},
                            'Giovanni_Campagna': {128: 0, 130: 0, 131: 0, 133: 0, 6: 0, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 1, 3: 0, 148: 0, 24: 2, 29: 0, 37: 1, 40: 3, 41: 1, 44: 2, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 1, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0},
                            'Jean_Coquet': {128: 0, 130: 0, 131: 0, 133: 0, 6: 1, 135: 0, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 0, 148: 0, 24: 0, 29: 0, 37: 0, 40: 1, 41: 0, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 0, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 0, 90: 0, 92: 0, 99: 0, 102: 0, 17: 0, 104: 0, 106: 0, 111: 0, 113: 0, 114: 0},
                            'Zhouheng_Zhuang': {128: 0, 130: 0, 131: 0, 133: 1, 6: 0, 135: 1, 9: 0, 10: 0, 11: 0, 141: 0, 142: 0, 15: 0, 144: 0, 145: 0, 18: 0, 3: 1, 148: 1, 24: 0, 29: 1, 37: 0, 40: 0, 41: 1, 44: 0, 46: 0, 49: 0, 51: 0, 52: 0, 55: 1, 56: 0, 58: 0, 59: 0, 73: 0, 75: 0, 76: 0, 77: 0, 83: 0, 88: 0, 89: 3, 90: 1, 92: 1, 99: 1, 102: 0, 17: 1, 104: 1, 106: 0, 111: 0, 113: 1, 114: 0}}

# a dictionary of the correctness rate of each question
question_correctness_rate = {'Jean_Coquet': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: '', 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Henry_Qin': {128: '', 130: '', 131: '', 133: '', 6: 1.0, 135: '', 9: 1.0, 10: '', 11: 0.64, 141: '', 142: '', 15: 1.0, 144: '', 145: '', 18: 1.0, 3: 0.0, 148: 0.0, 24: 1.0, 29: 0.91, 37: 0.0, 40: 1.0, 41: 0.0, 44: 0.0, 46: 0.8, 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: 0.67, 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Kylie_Jue': {128: '', 130: '', 131: '', 133: 1.0, 6: 1.0, 135: '', 9: 1.0, 10: '', 11: 1.0, 141: '', 142: '', 15: 1.0, 144: 1.0, 145: '', 18: '', 3: 0.0, 148: '', 24: 1.0, 29: '', 37: '', 40: 1.0, 41: 1.0, 44: 1.0, 46: 0.5, 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: 1.0, 17: '', 104: 1.0, 106: '', 111: '', 113: '', 114: ''}, 
                             'Andrew_Ying': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: 1.0, 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Noah Yinuo_Yao': {128: 0.8, 130: 1.0, 131: 1.0, 133: 1.0, 6: 0.85, 135: 1.0, 9: 0.84, 10: 0.6, 11: 0.71, 141: 1.0, 142: 1.0, 15: 0.81, 144: 1.0, 145: 1.0, 18: 0.87, 3: 0.81, 148: 1.0, 24: 0.78, 29: 0.69, 37: 0.72, 40: 0.89, 41: 0.77, 44: 0.74, 46: 0.91, 49: 0.81, 51: 1.0, 52: 1.0, 55: 1.0, 56: 1.0, 58: 1.0, 59: 1.0, 73: 1.0, 75: 1.0, 76: 1.0, 77: 1.0, 83: 1.0, 88: 1.0, 89: 1.0, 90: 1.0, 92: 1.0, 99: 1.0, 102: 0.73, 17: 0.77, 104: 1.0, 106: 1.0, 111: 1.0, 113: 1.0, 114: 1.0}, 
                             'Nina_Horowitz': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: 1.0, 11: 1.0, 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: 1.0, 148: '', 24: 1.0, 29: 1.0, 37: 1.0, 40: 1.0, 41: 1.0, 44: 1.0, 46: 1.0, 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Jingyi_Li': {128: 0.86, 130: 1.0, 131: 0.9, 133: 0.8, 6: 1.0, 135: 1.0, 9: 1.0, 10: 1.0, 11: 1.0, 141: 1.0, 142: 1.0, 15: 1.0, 144: 1.0, 145: 1.0, 18: 1.0, 3: 1.0, 148: 1.0, 24: 1.0, 29: 1.0, 37: 1.0, 40: 1.0, 41: 0.89, 44: 1.0, 46: 1.0, 49: 1.0, 51: 0.0, 52: 0.75, 55: 0.71, 56: 0.67, 58: 1.0, 59: 1.0, 73: 1.0, 75: 1.0, 76: 1.0, 77: 1.0, 83: 1.0, 88: 1.0, 89: 1.0, 90: 1.0, 92: 1.0, 99: 1.0, 102: 1.0, 17: 0.89, 104: 1.0, 106: 1.0, 111: 1.0, 113: 1.0, 114: 1.0}, 
                             'Joy_Yuzuriha': {128: 1.0, 130: 1.0, 131: 1.0, 133: 1.0, 6: 1.0, 135: 1.0, 9: 1.0, 10: '', 11: 1.0, 141: 1.0, 142: 1.0, 15: 1.0, 144: 1.0, 145: 1.0, 18: 1.0, 3: '', 148: 1.0, 24: 0.5, 29: 1.0, 37: '', 40: 1.0, 41: 1.0, 44: '', 46: 1.0, 49: 1.0, 51: 1.0, 52: 1.0, 55: 1.0, 56: 1.0, 58: 1.0, 59: 1.0, 73: 1.0, 75: 1.0, 76: 1.0, 77: 1.0, 83: 1.0, 88: 1.0, 89: 1.0, 90: 1.0, 92: 1.0, 99: 1.0, 102: 1.0, 17: 0.0, 104: 1.0, 106: 1.0, 111: 1.0, 113: 1.0, 114: 1.0}, 
                             'Olivia_Yang': {128: '', 130: 0.0, 131: '', 133: '', 6: 0.75, 135: '', 9: 0.0, 10: 0.5, 11: 0.75, 141: '', 142: 0.0, 15: 1.0, 144: '', 145: 0.0, 18: 0.0, 3: 0.0, 148: 0.0, 24: 0.5, 29: 0.0, 37: 0.67, 40: 0.5, 41: 0.33, 44: 0.67, 46: 0.0, 49: 1.0, 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: 0.0, 104: 0.0, 106: '', 111: '', 113: '', 114: ''}, 
                             'Ted_Shaowang': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: '', 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: 1.0, 58: '', 59: '', 73: '', 75: '', 76: '', 77: 0.0, 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Zhouheng_Zhuang': {128: '', 130: '', 131: '', 133: 1.0, 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: 1.0, 148: '', 24: '', 29: 1.0, 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: 1.0, 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: 1.0, 92: 1.0, 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: 1.0, 114: ''}, 
                             'De-an_Huang': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: '', 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Tyler_Yep': {128: 1.0, 130: 1.0, 131: 1.0, 133: 1.0, 6: 0.8, 135: 1.0, 9: 0.5, 10: 1.0, 11: 0.63, 141: '', 142: 1.0, 15: 1.0, 144: 1.0, 145: 1.0, 18: 1.0, 3: 1.0, 148: 1.0, 24: 0.6, 29: 1.0, 37: 1.0, 40: 1.0, 41: 0.8, 44: 0.43, 46: 0.8, 49: 1.0, 51: 1.0, 52: 1.0, 55: 1.0, 56: 1.0, 58: 1.0, 59: 1.0, 73: 1.0, 75: 1.0, 76: 1.0, 77: 1.0, 83: 1.0, 88: 1.0, 89: 0.8, 90: 1.0, 92: 1.0, 99: 1.0, 102: 1.0, 17: 0.75, 104: '', 106: 1.0, 111: 0.0, 113: 1.0, 114: 1.0}, 
                             'Helen_Wang': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: '', 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Dee Dee_Thao': {128: '', 130: '', 131: '', 133: '', 6: 1.0, 135: '', 9: 1.0, 10: 1.0, 11: 1.0, 141: '', 142: '', 15: 1.0, 144: '', 145: '', 18: 1.0, 3: 1.0, 148: '', 24: 1.0, 29: 0.5, 37: '', 40: 1.0, 41: 1.0, 44: 0.0, 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: 1.0, 104: '', 106: '', 111: '', 113: 0.0, 114: ''}, 
                             'Giovanni_Campagna': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: 1.0, 3: '', 148: '', 24: 1.0, 29: '', 37: 1.0, 40: 1.0, 41: 1.0, 44: 1.0, 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: 1.0, 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Fangmingyu_Yang': {128: '', 130: '', 131: '', 133: '', 6: 1.0, 135: '', 9: 0.99, 10: 1.0, 11: 1.0, 141: '', 142: '', 15: 1.0, 144: '', 145: '', 18: 1.0, 3: 0.99, 148: '', 24: 0.97, 29: 1.0, 37: 0.99, 40: 1.0, 41: 1.0, 44: 0.98, 46: 1.0, 49: 1.0, 51: '', 52: 1.0, 55: 0.0, 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: 1.0, 90: '', 92: 1.0, 99: 1.0, 102: '', 17: 1.0, 104: '', 106: '', 111: '', 113: '', 114: ''}, 
                             'Zhenqi_Hu': {128: 0.5, 130: 0.67, 131: 0.33, 133: 1.0, 6: 1.0, 135: 0.38, 9: 0.67, 10: 0.83, 11: 0.73, 141: 0.75, 142: 0.67, 15: 0.63, 144: 1.0, 145: 0.67, 18: 1.0, 3: 0.62, 148: 0.78, 24: 0.83, 29: 0.88, 37: 0.83, 40: 0.83, 41: 1.0, 44: 0.71, 46: 0.67, 49: 0.44, 51: 1.0, 52: 1.0, 55: 1.0, 56: 0.83, 58: 1.0, 59: 1.0, 73: 1.0, 75: 1.0, 76: 1.0, 77: 1.0, 83: 1.0, 88: 1.0, 89: 0.8, 90: 1.0, 92: 1.0, 99: 1.0, 102: 1.0, 17: 0.88, 104: 0.6, 106: 0.67, 111: 0.67, 113: 0.83, 114: 0.8}, 
                             'Daniel_Do': {128: '', 130: '', 131: '', 133: 0.5, 6: 0.0, 135: '', 9: '', 10: 0.71, 11: '', 141: '', 142: '', 15: 1.0, 144: 1.0, 145: '', 18: 1.0, 3: 0.57, 148: '', 24: 0.0, 29: 0.8, 37: 0.0, 40: 0.67, 41: 0.5, 44: 0.33, 46: 1.0, 49: 1.0, 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: 0.0, 99: 0.0, 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: 0.0}, 
                             'Francis_Yan': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: 1.0, 141: '', 142: '', 15: '', 144: '', 145: '', 18: 1.0, 3: '', 148: 1.0, 24: '', 29: '', 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: 1.0, 52: '', 55: '', 56: '', 58: '', 59: 1.0, 73: '', 75: '', 76: 1.0, 77: '', 83: '', 88: '', 89: '', 90: '', 92: 1.0, 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''},
                             'Helen_Wang': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: '', 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''},
                             'De-an_Huang': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: '', 37: '', 40: '', 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''},
                             'Kylie_Jue': {128: '', 130: '', 131: '', 133: 1.0, 6: 1.0, 135: '', 9: 1.0, 10: '', 11: 1.0, 141: '', 142: '', 15: 1.0, 144: 1.0, 145: '', 18: '', 3: 0.0, 148: '', 24: 1.0, 29: '', 37: '', 40: 1.0, 41: 1.0, 44: 1.0, 46: 0.5, 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: 1.0, 17: '', 104: 1.0, 106: '', 111: '', 113: '', 114: ''},
                             'Giovanni_Campagna': {128: '', 130: '', 131: '', 133: '', 6: '', 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: 1.0, 3: '', 148: '', 24: 1.0, 29: '', 37: 1.0, 40: 1.0, 41: 1.0, 44: 1.0, 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: 1.0, 104: '', 106: '', 111: '', 113: '', 114: ''},
                             'Jean_Coquet': {128: '', 130: '', 131: '', 133: '', 6: 1.0, 135: '', 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: '', 148: '', 24: '', 29: '', 37: '', 40: 1.0, 41: '', 44: '', 46: '', 49: '', 51: '', 52: '', 55: '', 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: '', 90: '', 92: '', 99: '', 102: '', 17: '', 104: '', 106: '', 111: '', 113: '', 114: ''},
                             'Zhouheng_Zhuang': {128: '', 130: '', 131: '', 133: 1.0, 6: '', 135: 1.0, 9: '', 10: '', 11: '', 141: '', 142: '', 15: '', 144: '', 145: '', 18: '', 3: 1.0, 148: 1.0, 24: '', 29: 1.0, 37: '', 40: '', 41: 1.0, 44: '', 46: '', 49: '', 51: '', 52: '', 55: 1.0, 56: '', 58: '', 59: '', 73: '', 75: '', 76: '', 77: '', 83: '', 88: '', 89: 1.0, 90: 1.0, 92: 1.0, 99: 1.0, 102: '', 17: 1.0, 104: 1.0, 106: '', 111: '', 113: 1.0, 114: ''}}

# qid of all 96 questions appeared in either quiz a or quiz b
all_appeared_question_qid = [1, 2, 3, 5, 6, 8, 9, 10, 11, 14, 15, 17, 18, 19, 21, 24, 25, 27, 29, 30, 31, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 64, 65, 68, 70, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 97, 99, 100, 102, 103, 104, 106, 111, 112, 113, 114, 117, 118, 120, 121, 125, 127, 128, 130, 131, 132, 133, 135, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148]

# 54 questions in post-study quiz (quiz B)
postquiz_qid = set([146, 145, 118, 130, 148, 117, 127, 111, 120, 141, 143, 147, 114, 121, \
                   106, 102, 112, 133, 72, 79, 90, 84, 58, 83, 59, 50, 56, 73, 93, 68, 53, \
                   77, 75, 97, 89, 87, 25, 24, 1, 19, 21, 44, 17, 30, 38, 6, 8, 2, 11, 37, \
                   9, 41, 29, 42])

quiz_a_to_id = {0: 148, 1: 49, 2: 18, 3: 111, 4: 6, 5: 51, 6: 93, 7: 94, 8: 102, 9: 21, \
                10: 128, 11: 82, 13: 135, 14: 114, 15: 146, 16: 113, 18: 131, 19: 41, \
                20: 55, 21: 37, 22: 52, 24: 58, 26: 11, 27: 64, 28: 14, 29: 88, 30: 84, \
                31: 103, 32: 90, 33: 32, 34: 117, 35: 136, 36: 31, 37: 44, 38: 132, 39: 45, \
                40: 42, 41: 76, 42: 104, 43: 53, 44: 72, 45: 5, 46: 15, 48: 100, 49: 27, 50: 65, \
                51: 35, 52: 138, 53: 125, 54: 127, 55: 99, 57: 46, 58: 75, 59: 79}

quiz_b_to_id = {0: 146, 1: 72, 2: 25, 3: 145, 4: 79, 6: 90, 7: 118, 8: 84, 9: 24, 10: 1, \
                11: 58, 12: 130, 13: 148, 14: 19, 15: 117, 16: 83, 17: 21, 18: 59, 19: 127, \
                22: 111, 23: 50, 24: 44, 25: 17, 26: 30, 27: 56, 28: 120, 29: 141, 30: 73, 31: 38, \
                32: 143, 33: 6, 34: 147, 35: 8, 36: 114, 37: 93, 38: 2, 39: 11, 41: 121, 42: 68, \
                43: 53, 44: 37, 45: 9, 46: 77, 49: 75, 50: 106, 51: 97, 52: 102, 53: 112, 54: 41, \
                55: 89, 56: 29, 57: 42, 58: 133, 59: 87}

quizbot_index_2_qid_dict = {0: 147, 1: 100, 2: 138, 3: 118, 4: 112, 5: 64, 6: 32, 7: 50, 8: 136, \
                            9: 143, 10: 121, 11: 132, 12: 120, 13: 8, 14: 5, 15: 30, 16: 117, \
                            17: 125, 18: 14, 19: 103, 20: 19, 21: 27, 22: 84, 23: 93, 24: 79, 25: 72, \
                            26: 2, 27: 31, 28: 42, 29: 35, 30: 65, 31: 25, 32: 1, 33: 21, 34: 38, \
                            35: 97, 36: 94, 37: 53, 38: 45, 39: 82, 40: 87, 41: 127, 42: 146, 43: 68, \
                            44: 139, 45: 85, 46: 74, 47: 70}

quizbot_qid = [147, 100, 138, 118, 112, 64, 32, 50, 136, 143, 121, 132, 120, 8, 5, 30, 117, 125, 14, \
               103, 19, 27, 84, 93, 79, 72, 2, 31, 42, 35, 65, 25, 1, 21, 38, 97, 94, 53, 45, 82, 87, \
               127, 146, 68, 139, 85, 74, 70]

qid_2_qualtricsID_dict = {value: key for key, value in quiz_b_to_id.items()}
qid_2_qualtricsID_dict_A = {value: key for key, value in quiz_a_to_id.items()}

postquiz_qid_A = set(qid_2_qualtricsID_dict_A.keys())


# time break considered to be a leave
BREAK_TIME = 30
# indices of useful data entry
SENDER_INDEX = 4
RECIPIENT_INDEX = 5
TIME_STAMP_INDEX = 8
QID_INDEX = 3
SCORE_INDEX = 5
TYPE_INDEX = 6
END_QID_INDEX = 8

if len(sys.argv) == 3:
    users = [sys.argv[1] + "_" + sys.argv[2]]

time_report = {} # a disctionary of dates and corresponding daily usage time
question_report = {} # a disctionary of studied question (total studies question, unique studies questions)

for user in users:
    conversation_filename = os.path.join(
        dirname, "../../SQL_query/user_data/quizbot_conversation_" + user + ".csv")

    user_history_filename = os.path.join(
        dirname, "../../SQL_query/user_data/quizbot_user_history_" + user + ".csv")

    # open the conversation data file
    with open(conversation_filename, 'rt') as csvfile:
        reader = list(csv.reader(csvfile))
        conversation_file = reader[1:]

    # open the user history data file
    with open(user_history_filename, 'rt') as csvfile:
        reader = list(csv.reader(csvfile))
        user_history_file = reader[1:]

    # unique user id and unique chatbot id
    user_id = conversation_file[0][0]
    chatbot_id = "854518728062939"

    sub_time_report = []  # a disctionary of dates and corresponding daily usage time
    # list of tuples of (0 if chatbot to user / 1 if user to chatbot <which is not used for now> , time breaks in second)
    analysis = [[]]
    day_counter = 0  # counter of total usage days
    total_usage_time = 0  # counter of total usage time

    sender = conversation_file[0][SENDER_INDEX]
    recipient = conversation_file[0][RECIPIENT_INDEX]
    old_time_stamp = conversation_file[0][TIME_STAMP_INDEX]
    old_time_stamp = datetime.strptime(old_time_stamp, "%Y-%m-%d %H:%M:%S")

    if sender == chatbot_id and recipient == user_id:
        analysis[day_counter].append((0, 0))
    else:
        analysis[day_counter].append((1, 0))

    for i in range(1, len(conversation_file)):
        time_stamp = conversation_file[i][TIME_STAMP_INDEX]
        time_stamp = datetime.strptime(time_stamp, "%Y-%m-%d %H:%M:%S")

        if (time_stamp.year, time_stamp.month, time_stamp.day) != (old_time_stamp.year, old_time_stamp.month, old_time_stamp.day):
            analysis.append([])
            day_counter += 1
            sub_time_report.append(
                (old_time_stamp.year, old_time_stamp.month, old_time_stamp.day, total_usage_time/60))
            total_usage_time = 0

        if (time_stamp - old_time_stamp).total_seconds() <= BREAK_TIME:
            total_usage_time += (time_stamp - old_time_stamp).total_seconds()
        old_time_stamp = time_stamp

    sub_time_report.append((old_time_stamp.year, old_time_stamp.month, old_time_stamp.day, total_usage_time/60))
    time_report[user] = sub_time_report

    events_mismatch_converted = [quizbot_index_2_qid_dict[int(x[QID_INDEX])] for x in user_history_file if x[END_QID_INDEX] != "" and int(x[END_QID_INDEX]) <= 6522]
    events = [int(x[QID_INDEX]) for x in user_history_file if x[END_QID_INDEX] != "" and int(x[END_QID_INDEX]) > 6522]
    events = events_mismatch_converted + events

    events_correct_mismatch_converted = [quizbot_index_2_qid_dict[int(x[QID_INDEX])] for x in user_history_file if x[END_QID_INDEX] != "" and int(x[END_QID_INDEX]) <= 6522 and int(x[SCORE_INDEX]) > 8]
    events_correct = [int(x[QID_INDEX]) for x in user_history_file if x[END_QID_INDEX] != "" and int(x[END_QID_INDEX]) > 6522 and int(x[SCORE_INDEX]) > 8]
    events_correct = events_correct_mismatch_converted + events_correct

    qid_in_postquiz_seen = set(events) & postquiz_qid
    qualtricsID_in_postquiz_seen = [qid_2_qualtricsID_dict[qid] for qid in qid_in_postquiz_seen]
    question_report[user] = (len(events), len(set(events)), len(qid_in_postquiz_seen), qualtricsID_in_postquiz_seen)

    for q in quizbot_qid:
        practice_question_count[user][q] = events.count(q)
    for q in quizbot_qid:
        if float(events.count(q)) == 0:
            question_correctness_rate[user][q] = ''
        else:
            question_correctness_rate[user][q] = round(float(events_correct.count(q)) / float(events.count(q)), 2)

    if user == 'Zilin_Ma':
        qid_in_postquiz_seen = set(events) & postquiz_qid_A
        qualtricsID_in_postquiz_seen = [qid_2_qualtricsID_dict_A[qid] for qid in qid_in_postquiz_seen]
        print(qualtricsID_in_postquiz_seen)
        question_report[user] = (len(events), len(set(events)), len(qid_in_postquiz_seen), qualtricsID_in_postquiz_seen)

        for q in quizbot_qid:
            practice_question_count[user][q] = events.count(q)
        for q in quizbot_qid:
            if float(events.count(q)) == 0:
                question_correctness_rate[user][q] = ''
            else:
                question_correctness_rate[user][q] = round(float(events_correct.count(q)) / float(events.count(q)), 2)

output_string = ""
for user in time_report:
    total_time = 0
    output_string += "----- "
    output_string += user
    output_string += " -----\n"

    for day_report in time_report[user]:
        output_string += str(day_report[0])
        output_string += "."
        output_string += str(day_report[1])
        output_string += "."
        output_string += '{:02}'.format(day_report[2])
        output_string += ": "
        output_string += str(round(day_report[3], 2))
        output_string += " min"
        output_string += "\n"
        total_time += day_report[3]
    output_string += "\n"

    output_string += "Number of questions practiced       : "
    output_string += str(question_report[user][0])
    output_string += "\n"
    output_string += "Number of unique questions practiced: "
    output_string += str(question_report[user][1])
    output_string += "\n"
    output_string += "Number of post-quiz questions seen  : "
    output_string += str(question_report[user][2])
    output_string += "\n"
    output_string += '['+', '.join(str(e) for e in question_report[user][3]) + ']\n'
    output_string += "Total APP Usage Time                : "
    output_string += str(round(total_time, 2))
    output_string += " min"
    output_string += "\n\n"

f = open(result_filename, 'w')
f.write(output_string)
f.close()
print(output_string)

all_practice_question_count = [['qid'] + all_appeared_question_qid]

for user in practice_question_count.keys():
    user_practice_question_count = [user] + practice_question_count[user].values()
    all_practice_question_count.append(user_practice_question_count)

with open(practice_question_file, 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerows(all_practice_question_count)

all_question_correctness_rate = [['qid'] + all_appeared_question_qid]

for user in question_correctness_rate.keys():
    user_correctness_rate = [user] + question_correctness_rate[user].values()
    all_question_correctness_rate.append(user_correctness_rate)

# all_question_correctness_rate = list(map(list, zip(*all_question_correctness_rate)))
with open(correctness_rate_file, 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerows(all_question_correctness_rate)

